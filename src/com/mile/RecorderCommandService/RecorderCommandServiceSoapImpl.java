
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.mile.RecorderCommandService;

import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.4.2
 * 2018-09-13T12:50:35.171-04:00
 * Generated source version: 2.4.2
 * 
 */

@javax.jws.WebService(
                      serviceName = "RecorderCommandService",
                      portName = "RecorderCommandServiceSoap12",
                      targetNamespace = "http://videoos.net/2/XProtectCSRecorderCommand",
                      wsdlLocation = "file:/C:/Program Files/Milestone/MIPSDK/WSDL/RecorderCommandService.wsdl",
                      endpointInterface = "com.mile.RecorderCommandService.RecorderCommandServiceSoap")
                      
public class RecorderCommandServiceSoapImpl implements RecorderCommandServiceSoap {

    private static final Logger LOG = Logger.getLogger(RecorderCommandServiceSoapImpl.class.getName());

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#presetSet(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  presetName )*
     */
    public void presetSet(java.lang.String token,java.lang.String deviceId,java.lang.String presetName) { 
        LOG.info("Executing operation presetSet");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(presetName);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#controlLiveStream(java.lang.String  token ,)java.lang.String  clientID ,)java.lang.String  controlID ,)com.mile.RecorderCommandService.ArrayOfLiveStreamDevice  devices )*
     */
    public void controlLiveStream(java.lang.String token,java.lang.String clientID,java.lang.String controlID,com.mile.RecorderCommandService.ArrayOfLiveStreamDevice devices) { 
        LOG.info("Executing operation controlLiveStream");
        System.out.println(token);
        System.out.println(clientID);
        System.out.println(controlID);
        System.out.println(devices);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzMoveAbsolute(java.lang.String  token ,)java.lang.String  deviceId ,)com.mile.RecorderCommandService.PTZArgs  ptzArgs )*
     */
    public void ptzMoveAbsolute(java.lang.String token,java.lang.String deviceId,com.mile.RecorderCommandService.PTZArgs ptzArgs) { 
        LOG.info("Executing operation ptzMoveAbsolute");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(ptzArgs);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#isManualRecording(java.lang.String  token ,)com.mile.RecorderCommandService.ArrayOfGuid  deviceIds )*
     */
    public com.mile.RecorderCommandService.ArrayOfManualRecordingInfo isManualRecording(java.lang.String token,com.mile.RecorderCommandService.ArrayOfGuid deviceIds) { 
        LOG.info("Executing operation isManualRecording");
        System.out.println(token);
        System.out.println(deviceIds);
        try {
            com.mile.RecorderCommandService.ArrayOfManualRecordingInfo _return = new com.mile.RecorderCommandService.ArrayOfManualRecordingInfo();
            java.util.List<com.mile.RecorderCommandService.ManualRecordingInfo> _returnManualRecordingInfo = new java.util.ArrayList<com.mile.RecorderCommandService.ManualRecordingInfo>();
            com.mile.RecorderCommandService.ManualRecordingInfo _returnManualRecordingInfoVal1 = new com.mile.RecorderCommandService.ManualRecordingInfo();
            _returnManualRecordingInfoVal1.setDeviceId("DeviceId-1727721102");
            _returnManualRecordingInfoVal1.setIsManualRecording(false);
            _returnManualRecordingInfo.add(_returnManualRecordingInfoVal1);
            _return.getManualRecordingInfo().addAll(_returnManualRecordingInfo);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzReleaseSession(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void ptzReleaseSession(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzReleaseSession");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#outputTrigger(java.lang.String  token ,)java.lang.String  deviceId ,)com.mile.RecorderCommandService.TimeDuration  duration )*
     */
    public void outputTrigger(java.lang.String token,java.lang.String deviceId,com.mile.RecorderCommandService.TimeDuration duration) { 
        LOG.info("Executing operation outputTrigger");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(duration);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#outputGetState(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public com.mile.RecorderCommandService.IOState outputGetState(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation outputGetState");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            com.mile.RecorderCommandService.IOState _return = com.mile.RecorderCommandService.IOState.UNKNOWN;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzMoveStop(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void ptzMoveStop(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzMoveStop");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#smartSearchGetResult(java.lang.String  token ,)java.lang.String  smartSearchId ,)boolean  continueSearch )*
     */
    public com.mile.RecorderCommandService.SmartSearchResult smartSearchGetResult(java.lang.String token,java.lang.String smartSearchId,boolean continueSearch) { 
        LOG.info("Executing operation smartSearchGetResult");
        System.out.println(token);
        System.out.println(smartSearchId);
        System.out.println(continueSearch);
        try {
            com.mile.RecorderCommandService.SmartSearchResult _return = new com.mile.RecorderCommandService.SmartSearchResult();
            _return.setImageTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.187-04:00"));
            com.mile.RecorderCommandService.ImageMask _returnMotionMask = new com.mile.RecorderCommandService.ImageMask();
            com.mile.RecorderCommandService.Size _returnMotionMaskSize = new com.mile.RecorderCommandService.Size();
            _returnMotionMaskSize.setWidth(2036308019);
            _returnMotionMaskSize.setHeight(1998053433);
            _returnMotionMask.setSize(_returnMotionMaskSize);
            _returnMotionMask.setMask("Mask-918671676");
            _return.setMotionMask(_returnMotionMask);
            com.mile.RecorderCommandService.MotionAreaInfos _returnMotionAreas = new com.mile.RecorderCommandService.MotionAreaInfos();
            com.mile.RecorderCommandService.Size _returnMotionAreasResolution = new com.mile.RecorderCommandService.Size();
            _returnMotionAreasResolution.setWidth(-988916820);
            _returnMotionAreasResolution.setHeight(384028845);
            _returnMotionAreas.setResolution(_returnMotionAreasResolution);
            com.mile.RecorderCommandService.ArrayOfMotionAreaInfo _returnMotionAreasAreas = new com.mile.RecorderCommandService.ArrayOfMotionAreaInfo();
            java.util.List<com.mile.RecorderCommandService.MotionAreaInfo> _returnMotionAreasAreasMotionAreaInfo = new java.util.ArrayList<com.mile.RecorderCommandService.MotionAreaInfo>();
            _returnMotionAreasAreas.getMotionAreaInfo().addAll(_returnMotionAreasAreasMotionAreaInfo);
            _returnMotionAreas.setAreas(_returnMotionAreasAreas);
            _return.setMotionAreas(_returnMotionAreas);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#multicastContinue(java.lang.String  token ,)com.mile.RecorderCommandService.ArrayOfGuid  multicastSessionIds )*
     */
    public void multicastContinue(java.lang.String token,com.mile.RecorderCommandService.ArrayOfGuid multicastSessionIds) { 
        LOG.info("Executing operation multicastContinue");
        System.out.println(token);
        System.out.println(multicastSessionIds);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#startRecording(java.lang.String  token ,)java.lang.String  deviceId ,)long  recordingTimeMicroSeconds )*
     */
    public boolean startRecording(java.lang.String token,java.lang.String deviceId,long recordingTimeMicroSeconds) { 
        LOG.info("Executing operation startRecording");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(recordingTimeMicroSeconds);
        try {
            boolean _return = false;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#outputActivate(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void outputActivate(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation outputActivate");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#jpegGetAtOrBefore(java.lang.String  token ,)java.lang.String  deviceId ,)javax.xml.datatype.XMLGregorianCalendar  time )*
     */
    public com.mile.RecorderCommandService.JPEGData jpegGetAtOrBefore(java.lang.String token,java.lang.String deviceId,javax.xml.datatype.XMLGregorianCalendar time) { 
        LOG.info("Executing operation jpegGetAtOrBefore");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(time);
        try {
            com.mile.RecorderCommandService.JPEGData _return = new com.mile.RecorderCommandService.JPEGData();
            _return.setTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.210-04:00"));
            byte[] _returnData = new byte[] {};
            _return.setData(_returnData);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#startManualRecording(java.lang.String  token ,)com.mile.RecorderCommandService.ArrayOfGuid  deviceIds )*
     */
    public com.mile.RecorderCommandService.ArrayOfManualRecordingResult startManualRecording(java.lang.String token,com.mile.RecorderCommandService.ArrayOfGuid deviceIds) { 
        LOG.info("Executing operation startManualRecording");
        System.out.println(token);
        System.out.println(deviceIds);
        try {
            com.mile.RecorderCommandService.ArrayOfManualRecordingResult _return = new com.mile.RecorderCommandService.ArrayOfManualRecordingResult();
            java.util.List<com.mile.RecorderCommandService.ManualRecordingResult> _returnManualRecordingResult = new java.util.ArrayList<com.mile.RecorderCommandService.ManualRecordingResult>();
            com.mile.RecorderCommandService.ManualRecordingResult _returnManualRecordingResultVal1 = new com.mile.RecorderCommandService.ManualRecordingResult();
            _returnManualRecordingResultVal1.setDeviceId("DeviceId877618324");
            _returnManualRecordingResultVal1.setResultCode(-835627064);
            _returnManualRecordingResultVal1.setMessage("Message-118914376");
            _returnManualRecordingResult.add(_returnManualRecordingResultVal1);
            _return.getManualRecordingResult().addAll(_returnManualRecordingResult);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#stopManualRecording(java.lang.String  token ,)com.mile.RecorderCommandService.ArrayOfGuid  deviceIds )*
     */
    public com.mile.RecorderCommandService.ArrayOfManualRecordingResult stopManualRecording(java.lang.String token,com.mile.RecorderCommandService.ArrayOfGuid deviceIds) { 
        LOG.info("Executing operation stopManualRecording");
        System.out.println(token);
        System.out.println(deviceIds);
        try {
            com.mile.RecorderCommandService.ArrayOfManualRecordingResult _return = new com.mile.RecorderCommandService.ArrayOfManualRecordingResult();
            java.util.List<com.mile.RecorderCommandService.ManualRecordingResult> _returnManualRecordingResult = new java.util.ArrayList<com.mile.RecorderCommandService.ManualRecordingResult>();
            com.mile.RecorderCommandService.ManualRecordingResult _returnManualRecordingResultVal1 = new com.mile.RecorderCommandService.ManualRecordingResult();
            _returnManualRecordingResultVal1.setDeviceId("DeviceId1618666616");
            _returnManualRecordingResultVal1.setResultCode(1813641710);
            _returnManualRecordingResultVal1.setMessage("Message-570511852");
            _returnManualRecordingResult.add(_returnManualRecordingResultVal1);
            _return.getManualRecordingResult().addAll(_returnManualRecordingResult);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzGetSessionInfo(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public com.mile.RecorderCommandService.PtzSessionInfo ptzGetSessionInfo(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzGetSessionInfo");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            com.mile.RecorderCommandService.PtzSessionInfo _return = new com.mile.RecorderCommandService.PtzSessionInfo();
            _return.setDeviceId("DeviceId1686725412");
            _return.setPatrollingProfileId("PatrollingProfileId1262298058");
            _return.setManualPatrollingProfileId("ManualPatrollingProfileId-555372085");
            com.mile.RecorderCommandService.UserInfo _returnUser = new com.mile.RecorderCommandService.UserInfo();
            _returnUser.setSid("Sid1179311555");
            _returnUser.setDisplayName("DisplayName1654757842");
            _return.setUser(_returnUser);
            _return.setPriority(983997194);
            _return.setReserved(true);
            _return.setIsPatrolling(true);
            _return.setIsAnonymous(false);
            _return.setIsPaused(true);
            _return.setTimeoutSec(-587379364);
            _return.setTimeoutLeftSec(1463168455);
            _return.setIsLicensed(false);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#inputGetState(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public com.mile.RecorderCommandService.IOState inputGetState(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation inputGetState");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            com.mile.RecorderCommandService.IOState _return = com.mile.RecorderCommandService.IOState.ACTIVATED;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#getRetentionTimeLimit(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public javax.xml.datatype.XMLGregorianCalendar getRetentionTimeLimit(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation getRetentionTimeLimit");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            javax.xml.datatype.XMLGregorianCalendar _return = javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.241-04:00");
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#jpegGetLive(java.lang.String  token ,)java.lang.String  deviceId ,)int  maxWidth ,)int  maxHeight )*
     */
    public com.mile.RecorderCommandService.JPEGData jpegGetLive(java.lang.String token,java.lang.String deviceId,int maxWidth,int maxHeight) { 
        LOG.info("Executing operation jpegGetLive");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(maxWidth);
        System.out.println(maxHeight);
        try {
            com.mile.RecorderCommandService.JPEGData _return = new com.mile.RecorderCommandService.JPEGData();
            _return.setTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.242-04:00"));
            byte[] _returnData = new byte[] {};
            _return.setData(_returnData);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#sequencesGet(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  sequenceType ,)javax.xml.datatype.XMLGregorianCalendar  minTime ,)javax.xml.datatype.XMLGregorianCalendar  maxTime ,)int  maxCount )*
     */
    public com.mile.RecorderCommandService.ArrayOfSequenceEntry sequencesGet(java.lang.String token,java.lang.String deviceId,java.lang.String sequenceType,javax.xml.datatype.XMLGregorianCalendar minTime,javax.xml.datatype.XMLGregorianCalendar maxTime,int maxCount) { 
        LOG.info("Executing operation sequencesGet");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(sequenceType);
        System.out.println(minTime);
        System.out.println(maxTime);
        System.out.println(maxCount);
        try {
            com.mile.RecorderCommandService.ArrayOfSequenceEntry _return = new com.mile.RecorderCommandService.ArrayOfSequenceEntry();
            java.util.List<com.mile.RecorderCommandService.SequenceEntry> _returnSequenceEntry = new java.util.ArrayList<com.mile.RecorderCommandService.SequenceEntry>();
            com.mile.RecorderCommandService.SequenceEntry _returnSequenceEntryVal1 = new com.mile.RecorderCommandService.SequenceEntry();
            _returnSequenceEntryVal1.setTimeBegin(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.244-04:00"));
            _returnSequenceEntryVal1.setTimeTrigged(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.245-04:00"));
            _returnSequenceEntryVal1.setTimeEnd(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.246-04:00"));
            _returnSequenceEntry.add(_returnSequenceEntryVal1);
            _return.getSequenceEntry().addAll(_returnSequenceEntry);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#jpegGetAtOrAfter(java.lang.String  token ,)java.lang.String  deviceId ,)javax.xml.datatype.XMLGregorianCalendar  time )*
     */
    public com.mile.RecorderCommandService.JPEGData jpegGetAtOrAfter(java.lang.String token,java.lang.String deviceId,javax.xml.datatype.XMLGregorianCalendar time) { 
        LOG.info("Executing operation jpegGetAtOrAfter");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(time);
        try {
            com.mile.RecorderCommandService.JPEGData _return = new com.mile.RecorderCommandService.JPEGData();
            _return.setTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.246-04:00"));
            byte[] _returnData = new byte[] {};
            _return.setData(_returnData);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#presetMoveTo(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  presetName )*
     */
    public void presetMoveTo(java.lang.String token,java.lang.String deviceId,java.lang.String presetName) { 
        LOG.info("Executing operation presetMoveTo");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(presetName);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#sendDriverCommandWithResponse(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  command ,)java.lang.String  parameter )*
     */
    public java.lang.String sendDriverCommandWithResponse(java.lang.String token,java.lang.String deviceId,java.lang.String command,java.lang.String parameter) { 
        LOG.info("Executing operation sendDriverCommandWithResponse");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(command);
        System.out.println(parameter);
        try {
            java.lang.String _return = "_return1262265917";
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#multicastStop(java.lang.String  token ,)com.mile.RecorderCommandService.ArrayOfGuid  multicastSessionIds )*
     */
    public void multicastStop(java.lang.String token,com.mile.RecorderCommandService.ArrayOfGuid multicastSessionIds) { 
        LOG.info("Executing operation multicastStop");
        System.out.println(token);
        System.out.println(multicastSessionIds);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzMoveHome(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void ptzMoveHome(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzMoveHome");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#smartSearchGetStatus(java.lang.String  token ,)java.lang.String  smartSearchId )*
     */
    public com.mile.RecorderCommandService.SmartSearchStatus smartSearchGetStatus(java.lang.String token,java.lang.String smartSearchId) { 
        LOG.info("Executing operation smartSearchGetStatus");
        System.out.println(token);
        System.out.println(smartSearchId);
        try {
            com.mile.RecorderCommandService.SmartSearchStatus _return = new com.mile.RecorderCommandService.SmartSearchStatus();
            _return.setCurrentSearchTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.256-04:00"));
            com.mile.RecorderCommandService.SmartSearchStatusType _returnStatus = com.mile.RecorderCommandService.SmartSearchStatusType.UNSPECIFIED_ERROR;
            _return.setStatus(_returnStatus);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzMoveStart(java.lang.String  token ,)java.lang.String  deviceId ,)com.mile.RecorderCommandService.PTZArgs  ptzArgs )*
     */
    public void ptzMoveStart(java.lang.String token,java.lang.String deviceId,com.mile.RecorderCommandService.PTZArgs ptzArgs) { 
        LOG.info("Executing operation ptzMoveStart");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(ptzArgs);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzCenter(java.lang.String  token ,)java.lang.String  deviceId ,)double  refWidth ,)double  refHeight ,)double  centerX ,)double  centerY ,)double  zoom )*
     */
    public void ptzCenter(java.lang.String token,java.lang.String deviceId,double refWidth,double refHeight,double centerX,double centerY,double zoom) { 
        LOG.info("Executing operation ptzCenter");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(refWidth);
        System.out.println(refHeight);
        System.out.println(centerX);
        System.out.println(centerY);
        System.out.println(zoom);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#timeLineInformationGet(java.lang.String  token ,)java.lang.String  deviceId ,)com.mile.RecorderCommandService.ArrayOfGuid  timeLineInformationTypes ,)javax.xml.datatype.XMLGregorianCalendar  timeLineInformationBeginTime ,)com.mile.RecorderCommandService.TimeDuration  timeLineInformationInterval ,)int  timeLineInformationCount )*
     */
    public com.mile.RecorderCommandService.ArrayOfTimeLineInformationData timeLineInformationGet(java.lang.String token,java.lang.String deviceId,com.mile.RecorderCommandService.ArrayOfGuid timeLineInformationTypes,javax.xml.datatype.XMLGregorianCalendar timeLineInformationBeginTime,com.mile.RecorderCommandService.TimeDuration timeLineInformationInterval,int timeLineInformationCount) { 
        LOG.info("Executing operation timeLineInformationGet");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(timeLineInformationTypes);
        System.out.println(timeLineInformationBeginTime);
        System.out.println(timeLineInformationInterval);
        System.out.println(timeLineInformationCount);
        try {
            com.mile.RecorderCommandService.ArrayOfTimeLineInformationData _return = new com.mile.RecorderCommandService.ArrayOfTimeLineInformationData();
            java.util.List<com.mile.RecorderCommandService.TimeLineInformationData> _returnTimeLineInformationData = new java.util.ArrayList<com.mile.RecorderCommandService.TimeLineInformationData>();
            com.mile.RecorderCommandService.TimeLineInformationData _returnTimeLineInformationDataVal1 = new com.mile.RecorderCommandService.TimeLineInformationData();
            _returnTimeLineInformationDataVal1.setDeviceId("DeviceId1693547711");
            _returnTimeLineInformationDataVal1.setType("Type-1944583684");
            _returnTimeLineInformationDataVal1.setBeginTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.260-04:00"));
            com.mile.RecorderCommandService.TimeDuration _returnTimeLineInformationDataVal1Interval = new com.mile.RecorderCommandService.TimeDuration();
            _returnTimeLineInformationDataVal1Interval.setMicroSeconds(3867329582006191065l);
            _returnTimeLineInformationDataVal1.setInterval(_returnTimeLineInformationDataVal1Interval);
            _returnTimeLineInformationDataVal1.setCount(-811848417);
            _returnTimeLineInformationDataVal1.setData("Data-2093132667");
            _returnTimeLineInformationData.add(_returnTimeLineInformationDataVal1);
            _return.getTimeLineInformationData().addAll(_returnTimeLineInformationData);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#smartSearchStart(java.lang.String  token ,)java.lang.String  deviceId ,)javax.xml.datatype.XMLGregorianCalendar  searchBeginTime ,)javax.xml.datatype.XMLGregorianCalendar  searchEndTime ,)int  sensitivity ,)com.mile.RecorderCommandService.TimeDuration  searchInterval ,)com.mile.RecorderCommandService.ImageMask  searchMask ,)boolean  ignoreInitialMotion ,)com.mile.RecorderCommandService.Size  resultMotionMaskSize )*
     */
    public java.lang.String smartSearchStart(java.lang.String token,java.lang.String deviceId,javax.xml.datatype.XMLGregorianCalendar searchBeginTime,javax.xml.datatype.XMLGregorianCalendar searchEndTime,int sensitivity,com.mile.RecorderCommandService.TimeDuration searchInterval,com.mile.RecorderCommandService.ImageMask searchMask,boolean ignoreInitialMotion,com.mile.RecorderCommandService.Size resultMotionMaskSize) { 
        LOG.info("Executing operation smartSearchStart");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(searchBeginTime);
        System.out.println(searchEndTime);
        System.out.println(sensitivity);
        System.out.println(searchInterval);
        System.out.println(searchMask);
        System.out.println(ignoreInitialMotion);
        System.out.println(resultMotionMaskSize);
        try {
            java.lang.String _return = "_return1897285501";
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#sendDriverCommand(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  command )*
     */
    public void sendDriverCommand(java.lang.String token,java.lang.String deviceId,java.lang.String command) { 
        LOG.info("Executing operation sendDriverCommand");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(command);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#outputDeactivate(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void outputDeactivate(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation outputDeactivate");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzReserveSession(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void ptzReserveSession(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzReserveSession");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#sequencesGetAround(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  sequenceType ,)javax.xml.datatype.XMLGregorianCalendar  centerTime ,)int  maxCountBefore ,)int  maxCountAfter )*
     */
    public com.mile.RecorderCommandService.ArrayOfSequenceEntry sequencesGetAround(java.lang.String token,java.lang.String deviceId,java.lang.String sequenceType,javax.xml.datatype.XMLGregorianCalendar centerTime,int maxCountBefore,int maxCountAfter) { 
        LOG.info("Executing operation sequencesGetAround");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(sequenceType);
        System.out.println(centerTime);
        System.out.println(maxCountBefore);
        System.out.println(maxCountAfter);
        try {
            com.mile.RecorderCommandService.ArrayOfSequenceEntry _return = new com.mile.RecorderCommandService.ArrayOfSequenceEntry();
            java.util.List<com.mile.RecorderCommandService.SequenceEntry> _returnSequenceEntry = new java.util.ArrayList<com.mile.RecorderCommandService.SequenceEntry>();
            com.mile.RecorderCommandService.SequenceEntry _returnSequenceEntryVal1 = new com.mile.RecorderCommandService.SequenceEntry();
            _returnSequenceEntryVal1.setTimeBegin(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.263-04:00"));
            _returnSequenceEntryVal1.setTimeTrigged(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.264-04:00"));
            _returnSequenceEntryVal1.setTimeEnd(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.264-04:00"));
            _returnSequenceEntry.add(_returnSequenceEntryVal1);
            _return.getSequenceEntry().addAll(_returnSequenceEntry);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#sequencesGetAroundWithSpan(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  sequenceType ,)javax.xml.datatype.XMLGregorianCalendar  centerTime ,)com.mile.RecorderCommandService.TimeDuration  maxTimeBefore ,)int  maxCountBefore ,)com.mile.RecorderCommandService.TimeDuration  maxTimeAfter ,)int  maxCountAfter )*
     */
    public com.mile.RecorderCommandService.ArrayOfSequenceEntry sequencesGetAroundWithSpan(java.lang.String token,java.lang.String deviceId,java.lang.String sequenceType,javax.xml.datatype.XMLGregorianCalendar centerTime,com.mile.RecorderCommandService.TimeDuration maxTimeBefore,int maxCountBefore,com.mile.RecorderCommandService.TimeDuration maxTimeAfter,int maxCountAfter) { 
        LOG.info("Executing operation sequencesGetAroundWithSpan");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(sequenceType);
        System.out.println(centerTime);
        System.out.println(maxTimeBefore);
        System.out.println(maxCountBefore);
        System.out.println(maxTimeAfter);
        System.out.println(maxCountAfter);
        try {
            com.mile.RecorderCommandService.ArrayOfSequenceEntry _return = new com.mile.RecorderCommandService.ArrayOfSequenceEntry();
            java.util.List<com.mile.RecorderCommandService.SequenceEntry> _returnSequenceEntry = new java.util.ArrayList<com.mile.RecorderCommandService.SequenceEntry>();
            com.mile.RecorderCommandService.SequenceEntry _returnSequenceEntryVal1 = new com.mile.RecorderCommandService.SequenceEntry();
            _returnSequenceEntryVal1.setTimeBegin(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.270-04:00"));
            _returnSequenceEntryVal1.setTimeTrigged(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.270-04:00"));
            _returnSequenceEntryVal1.setTimeEnd(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.271-04:00"));
            _returnSequenceEntry.add(_returnSequenceEntryVal1);
            _return.getSequenceEntry().addAll(_returnSequenceEntry);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzExtendedManualSession(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public void ptzExtendedManualSession(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzExtendedManualSession");
        System.out.println(token);
        System.out.println(deviceId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzGetAbsolutePosition(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public com.mile.RecorderCommandService.PTZArgs ptzGetAbsolutePosition(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation ptzGetAbsolutePosition");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            com.mile.RecorderCommandService.PTZArgs _return = new com.mile.RecorderCommandService.PTZArgs();
            java.util.List<com.mile.RecorderCommandService.PTZPairDouble> _returnMovement = new java.util.ArrayList<com.mile.RecorderCommandService.PTZPairDouble>();
            com.mile.RecorderCommandService.PTZPairDouble _returnMovementVal1 = new com.mile.RecorderCommandService.PTZPairDouble();
            _returnMovementVal1.setName("Name-1900160425");
            _returnMovementVal1.setValue(0.12203723725068061);
            _returnMovement.add(_returnMovementVal1);
            _return.getMovement().addAll(_returnMovement);
            java.util.List<com.mile.RecorderCommandService.PTZPairDouble> _returnSpeed = new java.util.ArrayList<com.mile.RecorderCommandService.PTZPairDouble>();
            com.mile.RecorderCommandService.PTZPairDouble _returnSpeedVal1 = new com.mile.RecorderCommandService.PTZPairDouble();
            _returnSpeedVal1.setName("Name-769226747");
            _returnSpeedVal1.setValue(0.26508869097799215);
            _returnSpeed.add(_returnSpeedVal1);
            _return.getSpeed().addAll(_returnSpeed);
            java.util.List<com.mile.RecorderCommandService.PTZPairBoolean> _returnAutomatic = new java.util.ArrayList<com.mile.RecorderCommandService.PTZPairBoolean>();
            com.mile.RecorderCommandService.PTZPairBoolean _returnAutomaticVal1 = new com.mile.RecorderCommandService.PTZPairBoolean();
            _returnAutomaticVal1.setName("Name-724261709");
            _returnAutomaticVal1.setValue(true);
            _returnAutomatic.add(_returnAutomaticVal1);
            _return.getAutomatic().addAll(_returnAutomatic);
            _return.setNormalized(false);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzDeactivatePatrollingSchema(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  patrollingSchemaId )*
     */
    public void ptzDeactivatePatrollingSchema(java.lang.String token,java.lang.String deviceId,java.lang.String patrollingSchemaId) { 
        LOG.info("Executing operation ptzDeactivatePatrollingSchema");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(patrollingSchemaId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#sequencesGetTypes(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public com.mile.RecorderCommandService.ArrayOfSequenceType sequencesGetTypes(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation sequencesGetTypes");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            com.mile.RecorderCommandService.ArrayOfSequenceType _return = new com.mile.RecorderCommandService.ArrayOfSequenceType();
            java.util.List<com.mile.RecorderCommandService.SequenceType> _returnSequenceType = new java.util.ArrayList<com.mile.RecorderCommandService.SequenceType>();
            com.mile.RecorderCommandService.SequenceType _returnSequenceTypeVal1 = new com.mile.RecorderCommandService.SequenceType();
            _returnSequenceTypeVal1.setId("Id1306016202");
            _returnSequenceTypeVal1.setName("Name810444614");
            _returnSequenceType.add(_returnSequenceTypeVal1);
            _return.getSequenceType().addAll(_returnSequenceType);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#multicastStart(java.lang.String  token ,)com.mile.RecorderCommandService.ArrayOfGuid  deviceIds ,)com.mile.RecorderCommandService.ClientCapabilities  clientCapabilities )*
     */
    public com.mile.RecorderCommandService.ArrayOfMulticastInfo multicastStart(java.lang.String token,com.mile.RecorderCommandService.ArrayOfGuid deviceIds,com.mile.RecorderCommandService.ClientCapabilities clientCapabilities) { 
        LOG.info("Executing operation multicastStart");
        System.out.println(token);
        System.out.println(deviceIds);
        System.out.println(clientCapabilities);
        try {
            com.mile.RecorderCommandService.ArrayOfMulticastInfo _return = new com.mile.RecorderCommandService.ArrayOfMulticastInfo();
            java.util.List<com.mile.RecorderCommandService.MulticastInfo> _returnMulticastInfo = new java.util.ArrayList<com.mile.RecorderCommandService.MulticastInfo>();
            com.mile.RecorderCommandService.MulticastInfo _returnMulticastInfoVal1 = new com.mile.RecorderCommandService.MulticastInfo();
            _returnMulticastInfoVal1.setDeviceId("DeviceId2116173860");
            _returnMulticastInfoVal1.setIPAddress("IPAddress922975177");
            _returnMulticastInfoVal1.setServerPort(-274175942);
            _returnMulticastInfoVal1.setClientPort(-2011685190);
            com.mile.RecorderCommandService.TimeDuration _returnMulticastInfoVal1KeepAliveInterval = new com.mile.RecorderCommandService.TimeDuration();
            _returnMulticastInfoVal1KeepAliveInterval.setMicroSeconds(-7538820809041640643l);
            _returnMulticastInfoVal1.setKeepAliveInterval(_returnMulticastInfoVal1KeepAliveInterval);
            _returnMulticastInfoVal1.setEncrypted(true);
            _returnMulticastInfoVal1.setMulticastSessionId("MulticastSessionId819774062");
            _returnMulticastInfoVal1.setSSRC(-6536374893300259145l);
            _returnMulticastInfoVal1.setPrivacyMask("PrivacyMask1022447229");
            _returnMulticastInfoVal1.setSuccess(true);
            _returnMulticastInfo.add(_returnMulticastInfoVal1);
            _return.getMulticastInfo().addAll(_returnMulticastInfo);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#getVersion(*
     */
    public int getVersion() { 
        LOG.info("Executing operation getVersion");
        try {
            int _return = 1146317388;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#jpegGetAt(java.lang.String  token ,)java.lang.String  deviceId ,)javax.xml.datatype.XMLGregorianCalendar  time )*
     */
    public com.mile.RecorderCommandService.JPEGData jpegGetAt(java.lang.String token,java.lang.String deviceId,javax.xml.datatype.XMLGregorianCalendar time) { 
        LOG.info("Executing operation jpegGetAt");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(time);
        try {
            com.mile.RecorderCommandService.JPEGData _return = new com.mile.RecorderCommandService.JPEGData();
            _return.setTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2018-09-13T12:50:35.276-04:00"));
            byte[] _returnData = new byte[] {};
            _return.setData(_returnData);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzActivatePatrollingSchema(java.lang.String  token ,)java.lang.String  deviceId ,)java.lang.String  patrollingSchemaId )*
     */
    public void ptzActivatePatrollingSchema(java.lang.String token,java.lang.String deviceId,java.lang.String patrollingSchemaId) { 
        LOG.info("Executing operation ptzActivatePatrollingSchema");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(patrollingSchemaId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzMoveRelative(java.lang.String  token ,)java.lang.String  deviceId ,)com.mile.RecorderCommandService.PTZArgs  ptzArgs )*
     */
    public void ptzMoveRelative(java.lang.String token,java.lang.String deviceId,com.mile.RecorderCommandService.PTZArgs ptzArgs) { 
        LOG.info("Executing operation ptzMoveRelative");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(ptzArgs);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#smartSearchCancel(java.lang.String  token ,)java.lang.String  smartSearchId )*
     */
    public void smartSearchCancel(java.lang.String token,java.lang.String smartSearchId) { 
        LOG.info("Executing operation smartSearchCancel");
        System.out.println(token);
        System.out.println(smartSearchId);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#ptzRectangle(java.lang.String  token ,)java.lang.String  deviceId ,)double  refWidth ,)double  refHeight ,)double  left ,)double  top ,)double  bottom ,)double  right )*
     */
    public void ptzRectangle(java.lang.String token,java.lang.String deviceId,double refWidth,double refHeight,double left,double top,double bottom,double right) { 
        LOG.info("Executing operation ptzRectangle");
        System.out.println(token);
        System.out.println(deviceId);
        System.out.println(refWidth);
        System.out.println(refHeight);
        System.out.println(left);
        System.out.println(top);
        System.out.println(bottom);
        System.out.println(right);
        try {
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.mile.RecorderCommandService.RecorderCommandServiceSoap#presetGetList(java.lang.String  token ,)java.lang.String  deviceId )*
     */
    public com.mile.RecorderCommandService.ArrayOfString presetGetList(java.lang.String token,java.lang.String deviceId) { 
        LOG.info("Executing operation presetGetList");
        System.out.println(token);
        System.out.println(deviceId);
        try {
            com.mile.RecorderCommandService.ArrayOfString _return = new com.mile.RecorderCommandService.ArrayOfString();
            java.util.List<java.lang.String> _returnString = new java.util.ArrayList<java.lang.String>();
            java.lang.String _returnStringVal1 = "_returnStringVal62346181";
            _returnString.add(_returnStringVal1);
            _return.getString().addAll(_returnString);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
